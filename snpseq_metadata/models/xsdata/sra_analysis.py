from dataclasses import dataclass, field
from enum import Enum
from typing import List, Optional
from xsdata.models.datatype import XmlDateTime
from snpseq_metadata.models.xsdata.sra_common import (
    AttributeType,
    LinkType,
    ObjectType,
    RefObjectType,
    ReferenceSequenceType,
)


class AnalysisFileTypeChecksumMethod(Enum):
    """
    :cvar MD5: Checksum generated by the MD5 method (md5sum in
        unix).
    """

    MD5 = "MD5"


class AnalysisFileTypeFiletype(Enum):
    TAB = "tab"
    BAM = "bam"
    BAI = "bai"
    CRAM = "cram"
    CRAI = "crai"
    VCF = "vcf"
    VCF_AGGREGATE = "vcf_aggregate"
    BCF = "bcf"
    TABIX = "tabix"
    WIG = "wig"
    BED = "bed"
    GFF = "gff"
    FASTA = "fasta"
    FASTQ = "fastq"
    FLATFILE = "flatfile"
    CHROMOSOME_LIST = "chromosome_list"
    SAMPLE_LIST = "sample_list"
    README_FILE = "readme_file"
    PHENOTYPE_FILE = "phenotype_file"
    BIO_NANO_NATIVE = "BioNano_native"
    KALLISTO_NATIVE = "Kallisto_native"
    AGP = "agp"
    UNLOCALISED_LIST = "unlocalised_list"
    INFO = "info"
    MANIFEST = "manifest"
    CSI = "csi"
    BCF_AGGREGATE = "bcf_aggregate"
    OTHER = "other"


class GenomeMapPlatform(Enum):
    BIO_NANO = "BioNano"


class SequenceAssemblyMolType(Enum):
    GENOMIC_DNA = "genomic DNA"
    GENOMIC_RNA = "genomic RNA"
    VIRAL_C_RNA = "viral cRNA"


class SequenceAssemblyType(Enum):
    """
    :cvar CLONE_OR_ISOLATE: An assembly of reads from an isolated
        cultured organism, tissues, cells or a cell line.
    :cvar PRIMARY_METAGENOME: An original metagenome assembly prior to
        binning from a sampled biome or collection of sampled biomes
        without attempt to separate taxa.
    :cvar BINNED_METAGENOME: A set of contigs drawn from primary or
        unbinned metagenomes grouped into a single-taxon set.
    :cvar METAGENOME_ASSEMBLED_GENOME_MAG: A single-taxon assembly based
        on a binned metagenome asserted to be a close representation to
        an actual individual genome (that could match an already
        existing isolate or represent a novel isolate).
    :cvar ENVIRONMENTAL_SINGLE_CELL_AMPLIFIED_GENOME_SAG: A genome
        assembly from amplified environmental sampled single-cell DNA.
    :cvar COVID_19_OUTBREAK: A genome assembly specific to COVID-19
        outbreak.
    """

    CLONE_OR_ISOLATE = "clone or isolate"
    PRIMARY_METAGENOME = "primary metagenome"
    BINNED_METAGENOME = "binned metagenome"
    METAGENOME_ASSEMBLED_GENOME_MAG = "Metagenome-Assembled Genome (MAG)"
    ENVIRONMENTAL_SINGLE_CELL_AMPLIFIED_GENOME_SAG = (
        "Environmental Single-Cell Amplified Genome (SAG)"
    )
    COVID_19_OUTBREAK = "COVID-19 outbreak"


class SequenceVariationExperimentType(Enum):
    WHOLE_GENOME_SEQUENCING = "Whole genome sequencing"
    WHOLE_TRANSCRIPTOME_SEQUENCING = "Whole transcriptome sequencing"
    EXOME_SEQUENCING = "Exome sequencing"
    GENOTYPING_BY_ARRAY = "Genotyping by array"
    TRANSCRIPTOMICS = "transcriptomics"
    CURATION = "Curation"
    GENOTYPING_BY_SEQUENCING = "Genotyping by sequencing"
    TARGET_SEQUENCING = "Target sequencing"


class TranscriptomeAssemblyType(Enum):
    """
    :cvar ISOLATE: An assembly of reads from an isolated cultured
        organism, tissues, cells or a cell line.
    :cvar METATRANSCRIPTOME: An original metatranscriptome assembly from
        a sampled biome or collection of sampled biomes without attempt
        to separate taxa.
    """

    ISOLATE = "isolate"
    METATRANSCRIPTOME = "metatranscriptome"


@dataclass
class AnalysisFileType:
    """
    :ivar filename: The file name.
    :ivar filetype: The type of the file.
    :ivar checksum_method: The checksum method.
    :ivar checksum: The file checksum.
    :ivar unencrypted_checksum: The checksum of the unencrypted file
        (used in conjunction with the checksum of an encrypted file).
    :ivar checklist: The name of the checklist.
    """

    filename: Optional[str] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "required": True,
        },
    )
    filetype: Optional[AnalysisFileTypeFiletype] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "required": True,
        },
    )
    checksum_method: Optional[AnalysisFileTypeChecksumMethod] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "required": True,
        },
    )
    checksum: Optional[str] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "required": True,
        },
    )
    unencrypted_checksum: Optional[str] = field(
        default=None,
        metadata={
            "type": "Attribute",
        },
    )
    checklist: Optional[str] = field(
        default=None,
        metadata={
            "type": "Attribute",
        },
    )


@dataclass
class AnalysisType(ObjectType):
    """
    A SRA analysis object captures sequence analysis results including sequence
    alignments, sequence variations and sequence annotations.

    :ivar title: Title of the analysis object which will be displayed in
        search results.
    :ivar description: Describes the analysis in detail.
    :ivar study_ref: Identifies the parent study.
    :ivar sample_ref: One of more samples associated with the
        analysis.
    :ivar experiment_ref:
    :ivar run_ref: One or more runs associated with the
        analysis.
    :ivar analysis_ref: One or more analyses associated with the
        analysis.
    :ivar analysis_type: The type of the analysis.
    :ivar files: Files associated with the
        analysis.
    :ivar analysis_links: Links to resources related to this analysis.
    :ivar analysis_attributes: Properties and attributes of an analysis.
        These can be                         entered as free-form tag-
        value pairs.
    :ivar analysis_center: If applicable, the center name of the
        institution responsible                     for this analysis.
    :ivar analysis_date: The date when this analysis was produced.
    """

    title: Optional[str] = field(
        default=None,
        metadata={
            "name": "TITLE",
            "type": "Element",
            "namespace": "",
        },
    )
    description: Optional[str] = field(
        default=None,
        metadata={
            "name": "DESCRIPTION",
            "type": "Element",
            "namespace": "",
        },
    )
    study_ref: Optional["AnalysisType.StudyRef"] = field(
        default=None,
        metadata={
            "name": "STUDY_REF",
            "type": "Element",
            "namespace": "",
        },
    )
    sample_ref: List["AnalysisType.SampleRef"] = field(
        default_factory=list,
        metadata={
            "name": "SAMPLE_REF",
            "type": "Element",
            "namespace": "",
        },
    )
    experiment_ref: List["AnalysisType.ExperimentRef"] = field(
        default_factory=list,
        metadata={
            "name": "EXPERIMENT_REF",
            "type": "Element",
            "namespace": "",
        },
    )
    run_ref: List["AnalysisType.RunRef"] = field(
        default_factory=list,
        metadata={
            "name": "RUN_REF",
            "type": "Element",
            "namespace": "",
        },
    )
    analysis_ref: List["AnalysisType.AnalysisRef"] = field(
        default_factory=list,
        metadata={
            "name": "ANALYSIS_REF",
            "type": "Element",
            "namespace": "",
        },
    )
    analysis_type: Optional["AnalysisType.AnalysisType"] = field(
        default=None,
        metadata={
            "name": "ANALYSIS_TYPE",
            "type": "Element",
            "namespace": "",
            "required": True,
        },
    )
    files: Optional["AnalysisType.Files"] = field(
        default=None,
        metadata={
            "name": "FILES",
            "type": "Element",
            "namespace": "",
            "required": True,
        },
    )
    analysis_links: Optional["AnalysisType.AnalysisLinks"] = field(
        default=None,
        metadata={
            "name": "ANALYSIS_LINKS",
            "type": "Element",
            "namespace": "",
        },
    )
    analysis_attributes: Optional["AnalysisType.AnalysisAttributes"] = field(
        default=None,
        metadata={
            "name": "ANALYSIS_ATTRIBUTES",
            "type": "Element",
            "namespace": "",
        },
    )
    analysis_center: Optional[str] = field(
        default=None,
        metadata={
            "type": "Attribute",
        },
    )
    analysis_date: Optional[XmlDateTime] = field(
        default=None,
        metadata={
            "type": "Attribute",
        },
    )

    @dataclass
    class StudyRef(RefObjectType):
        pass

    @dataclass
    class SampleRef(RefObjectType):
        """
        :ivar label: A label associating the sample with sample
            references in data files.
        """

        label: Optional[str] = field(
            default=None,
            metadata={
                "type": "Attribute",
            },
        )

    @dataclass
    class ExperimentRef(RefObjectType):
        pass

    @dataclass
    class RunRef(RefObjectType):
        """
        :ivar label: A label associating the run with run references in
            data files.
        """

        label: Optional[str] = field(
            default=None,
            metadata={
                "type": "Attribute",
            },
        )

    @dataclass
    class AnalysisRef(RefObjectType):
        """
        :ivar label: A label associating the analysis with analysis
            references in data files.
        """

        label: Optional[str] = field(
            default=None,
            metadata={
                "type": "Attribute",
            },
        )

    @dataclass
    class AnalysisType:
        reference_alignment: Optional[ReferenceSequenceType] = field(
            default=None,
            metadata={
                "name": "REFERENCE_ALIGNMENT",
                "type": "Element",
                "namespace": "",
            },
        )
        sequence_variation: Optional[
            "AnalysisType.AnalysisType.SequenceVariation"
        ] = field(
            default=None,
            metadata={
                "name": "SEQUENCE_VARIATION",
                "type": "Element",
                "namespace": "",
            },
        )
        sequence_assembly: Optional[
            "AnalysisType.AnalysisType.SequenceAssembly"
        ] = field(
            default=None,
            metadata={
                "name": "SEQUENCE_ASSEMBLY",
                "type": "Element",
                "namespace": "",
            },
        )
        sequence_flatfile: Optional[
            "AnalysisType.AnalysisType.SequenceFlatfile"
        ] = field(
            default=None,
            metadata={
                "name": "SEQUENCE_FLATFILE",
                "type": "Element",
                "namespace": "",
            },
        )
        sequence_annotation: Optional[ReferenceSequenceType] = field(
            default=None,
            metadata={
                "name": "SEQUENCE_ANNOTATION",
                "type": "Element",
                "namespace": "",
            },
        )
        reference_sequence: Optional[
            "AnalysisType.AnalysisType.ReferenceSequence"
        ] = field(
            default=None,
            metadata={
                "name": "REFERENCE_SEQUENCE",
                "type": "Element",
                "namespace": "",
            },
        )
        sample_phenotype: Optional["AnalysisType.AnalysisType.SamplePhenotype"] = field(
            default=None,
            metadata={
                "name": "SAMPLE_PHENOTYPE",
                "type": "Element",
                "namespace": "",
            },
        )
        processed_reads: Optional[ReferenceSequenceType] = field(
            default=None,
            metadata={
                "name": "PROCESSED_READS",
                "type": "Element",
                "namespace": "",
            },
        )
        genome_map: Optional["AnalysisType.AnalysisType.GenomeMap"] = field(
            default=None,
            metadata={
                "name": "GENOME_MAP",
                "type": "Element",
                "namespace": "",
            },
        )
        amr_antibiogram: Optional[object] = field(
            default=None,
            metadata={
                "name": "AMR_ANTIBIOGRAM",
                "type": "Element",
                "namespace": "",
            },
        )
        pathogen_analysis: Optional[object] = field(
            default=None,
            metadata={
                "name": "PATHOGEN_ANALYSIS",
                "type": "Element",
                "namespace": "",
            },
        )
        transcriptome_assembly: Optional[
            "AnalysisType.AnalysisType.TranscriptomeAssembly"
        ] = field(
            default=None,
            metadata={
                "name": "TRANSCRIPTOME_ASSEMBLY",
                "type": "Element",
                "namespace": "",
            },
        )
        taxonomic_reference_set: Optional[
            "AnalysisType.AnalysisType.TaxonomicReferenceSet"
        ] = field(
            default=None,
            metadata={
                "name": "TAXONOMIC_REFERENCE_SET",
                "type": "Element",
                "namespace": "",
            },
        )

        @dataclass
        class SequenceVariation(ReferenceSequenceType):
            experiment_type: List[SequenceVariationExperimentType] = field(
                default_factory=list,
                metadata={
                    "name": "EXPERIMENT_TYPE",
                    "type": "Element",
                    "namespace": "",
                },
            )
            program: Optional[str] = field(
                default=None,
                metadata={
                    "name": "PROGRAM",
                    "type": "Element",
                    "namespace": "",
                },
            )
            platform: Optional[str] = field(
                default=None,
                metadata={
                    "name": "PLATFORM",
                    "type": "Element",
                    "namespace": "",
                },
            )
            imputation: Optional[bool] = field(
                default=None,
                metadata={
                    "name": "IMPUTATION",
                    "type": "Element",
                    "namespace": "",
                },
            )

        @dataclass
        class SequenceAssembly:
            name: Optional[str] = field(
                default=None,
                metadata={
                    "name": "NAME",
                    "type": "Element",
                    "namespace": "",
                    "required": True,
                },
            )
            type: Optional[SequenceAssemblyType] = field(
                default=None,
                metadata={
                    "name": "TYPE",
                    "type": "Element",
                    "namespace": "",
                },
            )
            partial: Optional[bool] = field(
                default=None,
                metadata={
                    "name": "PARTIAL",
                    "type": "Element",
                    "namespace": "",
                    "required": True,
                },
            )
            coverage: Optional[str] = field(
                default=None,
                metadata={
                    "name": "COVERAGE",
                    "type": "Element",
                    "namespace": "",
                    "required": True,
                },
            )
            program: Optional[str] = field(
                default=None,
                metadata={
                    "name": "PROGRAM",
                    "type": "Element",
                    "namespace": "",
                    "required": True,
                },
            )
            platform: Optional[str] = field(
                default=None,
                metadata={
                    "name": "PLATFORM",
                    "type": "Element",
                    "namespace": "",
                    "required": True,
                },
            )
            min_gap_length: Optional[int] = field(
                default=None,
                metadata={
                    "name": "MIN_GAP_LENGTH",
                    "type": "Element",
                    "namespace": "",
                },
            )
            mol_type: Optional[SequenceAssemblyMolType] = field(
                default=None,
                metadata={
                    "name": "MOL_TYPE",
                    "type": "Element",
                    "namespace": "",
                },
            )
            tpa: Optional[bool] = field(
                default=None,
                metadata={
                    "name": "TPA",
                    "type": "Element",
                    "namespace": "",
                },
            )
            authors: Optional[str] = field(
                default=None,
                metadata={
                    "name": "AUTHORS",
                    "type": "Element",
                    "namespace": "",
                },
            )
            address: Optional[str] = field(
                default=None,
                metadata={
                    "name": "ADDRESS",
                    "type": "Element",
                    "namespace": "",
                },
            )

        @dataclass
        class SequenceFlatfile:
            authors: Optional[str] = field(
                default=None,
                metadata={
                    "name": "AUTHORS",
                    "type": "Element",
                    "namespace": "",
                },
            )
            address: Optional[str] = field(
                default=None,
                metadata={
                    "name": "ADDRESS",
                    "type": "Element",
                    "namespace": "",
                },
            )

        @dataclass
        class ReferenceSequence:
            pass

        @dataclass
        class SamplePhenotype:
            pass

        @dataclass
        class GenomeMap:
            program: Optional[str] = field(
                default=None,
                metadata={
                    "name": "PROGRAM",
                    "type": "Element",
                    "namespace": "",
                    "required": True,
                },
            )
            platform: Optional[GenomeMapPlatform] = field(
                default=None,
                metadata={
                    "name": "PLATFORM",
                    "type": "Element",
                    "namespace": "",
                    "required": True,
                },
            )
            description: Optional[str] = field(
                default=None,
                metadata={
                    "name": "DESCRIPTION",
                    "type": "Element",
                    "namespace": "",
                },
            )

        @dataclass
        class TranscriptomeAssembly:
            name: Optional[str] = field(
                default=None,
                metadata={
                    "name": "NAME",
                    "type": "Element",
                    "namespace": "",
                    "required": True,
                },
            )
            program: Optional[str] = field(
                default=None,
                metadata={
                    "name": "PROGRAM",
                    "type": "Element",
                    "namespace": "",
                    "required": True,
                },
            )
            platform: Optional[str] = field(
                default=None,
                metadata={
                    "name": "PLATFORM",
                    "type": "Element",
                    "namespace": "",
                    "required": True,
                },
            )
            tpa: Optional[bool] = field(
                default=None,
                metadata={
                    "name": "TPA",
                    "type": "Element",
                    "namespace": "",
                },
            )
            authors: Optional[str] = field(
                default=None,
                metadata={
                    "name": "AUTHORS",
                    "type": "Element",
                    "namespace": "",
                },
            )
            address: Optional[str] = field(
                default=None,
                metadata={
                    "name": "ADDRESS",
                    "type": "Element",
                    "namespace": "",
                },
            )
            type: Optional[TranscriptomeAssemblyType] = field(
                default=None,
                metadata={
                    "name": "TYPE",
                    "type": "Element",
                    "namespace": "",
                },
            )

        @dataclass
        class TaxonomicReferenceSet:
            name: Optional[str] = field(
                default=None,
                metadata={
                    "name": "NAME",
                    "type": "Element",
                    "namespace": "",
                    "required": True,
                },
            )
            taxonomy_system: Optional[str] = field(
                default=None,
                metadata={
                    "name": "TAXONOMY_SYSTEM",
                    "type": "Element",
                    "namespace": "",
                    "required": True,
                },
            )
            taxonomy_system_version: Optional[str] = field(
                default=None,
                metadata={
                    "name": "TAXONOMY_SYSTEM_VERSION",
                    "type": "Element",
                    "namespace": "",
                },
            )
            custom_fields: Optional[
                "AnalysisType.AnalysisType.TaxonomicReferenceSet.CustomFields"
            ] = field(
                default=None,
                metadata={
                    "name": "CUSTOM_FIELDS",
                    "type": "Element",
                    "namespace": "",
                },
            )

            @dataclass
            class CustomFields:
                field_value: List[
                    "AnalysisType.AnalysisType.TaxonomicReferenceSet.CustomFields.FieldType"
                ] = field(
                    default_factory=list,
                    metadata={
                        "name": "FIELD",
                        "type": "Element",
                        "namespace": "",
                    },
                )

                @dataclass
                class FieldType:
                    name: Optional[object] = field(
                        default=None,
                        metadata={
                            "name": "NAME",
                            "type": "Element",
                            "namespace": "",
                            "required": True,
                        },
                    )
                    description: Optional[object] = field(
                        default=None,
                        metadata={
                            "name": "DESCRIPTION",
                            "type": "Element",
                            "namespace": "",
                            "required": True,
                        },
                    )

    @dataclass
    class AnalysisLinks:
        analysis_link: List[LinkType] = field(
            default_factory=list,
            metadata={
                "name": "ANALYSIS_LINK",
                "type": "Element",
                "namespace": "",
                "min_occurs": 1,
            },
        )

    @dataclass
    class AnalysisAttributes:
        analysis_attribute: List[AttributeType] = field(
            default_factory=list,
            metadata={
                "name": "ANALYSIS_ATTRIBUTE",
                "type": "Element",
                "namespace": "",
                "min_occurs": 1,
            },
        )

    @dataclass
    class Files:
        file: List[AnalysisFileType] = field(
            default_factory=list,
            metadata={
                "name": "FILE",
                "type": "Element",
                "namespace": "",
                "min_occurs": 1,
            },
        )


@dataclass
class Analysis(AnalysisType):
    class Meta:
        name = "ANALYSIS"


@dataclass
class AnalysisSetType:
    analysis: List[AnalysisType] = field(
        default_factory=list,
        metadata={
            "name": "ANALYSIS",
            "type": "Element",
            "namespace": "",
            "min_occurs": 1,
        },
    )


@dataclass
class AnalysisSet(AnalysisSetType):
    """
    A container of analysis objects.
    """

    class Meta:
        name = "ANALYSIS_SET"
